-------
1/25/20
-------
MalwAIR isn't working properly with Ubuntu either, same reason.

Testing on Windows:
	RtAudio is lacking support so the following steps are necessary
		1. Install MinGW: Packages I selected were mingw-developer-toolkit-bin, mingw32-base-bin, mingw32-gcc-g++-bin, msys-base-bin
		2. Download RtAudio
		3. Inside MSYS command line (C:\MinGW\msys\1.0\msys.bat), follow same step to install RtAudio
		4. Slight modificaiton to code to work on windows (will make comment inside the code itself)
		5. Modification of order of flags for compiling (solves an error, but don't know why)
			g++  -o build/malwAIR src/main.cpp src/Audio.cpp -Wall -std=c++14 -L/usr/local/lib -lrtaudio -I/usr/local/include/rtaudio
		6. Inside MSYS command line:
			LD_LIBRARY_PATH=/usr/local/lib
			export LD_LIBRARY_PATH
			make
			make run

TODO: create build folder in the Github repo, or change Makefile to create the folder if one doesn't exist

-------
1/23/20
-------
MalwAIR isn't behaving properly on Manjaro Linux. For some reason, when two ultrasound tones are played on Manjaro Linux at the same time, the combined sound becomes audible.

Fix protocol for sending data
	1 tone for start
	1 tone for stop
	16 tone for hexadecimal representation of a bit
	16 of those tone + another tone sent simutaneously to detect that a different tone was sent

-------
11/6/19
-------
Reorganized code. Wrote a simple script to read a file in binary mode, deconstruct each byte read down into bits, and play a tone for each bit (different tone for bit 0 and bit 1)

-------
11/3/19
-------
Completed a simple program that generates two different tone.
Note:
  - Mono ouput because even if a computer has more than one channel, no reason to output differently for each

--------
10/28/19
--------
Check out this example:
	https://gist.github.com/nagachika/165241

--------
10/27/19
--------
Before Running:
LD_LIBRARY_PATH=/usr/local/lib
export LD_LIBRARY_PATH

When compiling:
	g++ -std=c++11 -L/usr/local/lib -lrtaudio -I/usr/local/include/rtaudio rtaudio_test.cpp

Programming Decision
	Using C++
	Selected RtAudio library for audio input/output


How RtAudio and other sound libraries work.
	- Each OS has one or more native sound api in addition to others that are non-standard or deprecated. The audio library encapsulate the way that each native API works in order for developer to write audio software. 
	- Sources:
		- https://stackoverflow.com/questions/41996137/c-c-sound-os-api
		- http://portaudio.com/docs/v19-doxydocs/api_overview.html